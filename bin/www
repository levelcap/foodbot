#!/usr/bin/env node
const app = require('../app');
const debug = require('debug')('init:server');
const http = require('http');
const MongoClient = require('mongodb').MongoClient;
const RedisSMQ = require("rsmq");
const dotenv = require('dotenv');

dotenv.config();

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const mongoUri = process.env.MONGODB_URI;
const options = {
  url: process.env.REDIS_URL,
};
const rsmq = new RedisSMQ({ options });

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Server started on ${bind}`);
  MongoClient.connect(mongoUri, (mongoErr, mongoDb) => {
    if (mongoErr) {
      console.log(mongoErr);
      process.exit(1);
    }
    console.log('Successfully connected to mongo');
  });

}
