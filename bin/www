#!/usr/bin/env node
const app = require('../app');
const debug = require('debug')('init:server');
const http = require('http');
const _ = require('lodash');
const MongoClient = require('mongodb').MongoClient;
const redis = require('redis');
const RSMQPromise = require('rsmq-promise');
const RSMQWorker = require('rsmq-worker');
const dotenv = require('dotenv');
const request = require('request-promise-native');
const cheerio = require("cheerio");
const { setRsmq, setMongo, getMongo } = require('../src/common');
const johnsonville = 'JohnsonvilleÂ® Three Cheese Italian Style Chicken Sausage Skillet Pizza';

dotenv.config();

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

const mongoUri = process.env.MONGODB_URI;
const redisClient = redis.createClient(process.env.REDISTOGO_URL);
const options = {
  client: redisClient,
};
const rsmq = new RSMQPromise(options);

function cleanLine(line) {
  line = line.replace(new RegExp('\n', 'g'), '');
  return line.replace(new RegExp('~', 'g'), '');
}

async function getAllRecipe(index) {
  const mongo = getMongo();
  const options = {
    uri: `https://www.allrecipes.com/recipe/${index}`,
    transform: (body) => {
      return cheerio.load(body);
    },
    maxRedirects: 10,
  };
  try {
    let recipeString = "";
    const $ = await request(options);
    const title = $('.recipe-summary__h1').text();
    if (!title || title === johnsonville) {
      return `${index} is just more sausages!`
    }
    recipeString = recipeString.concat(`title:${cleanLine(title)}\n`);
    const author = $('.submitter__name').text();
    recipeString = recipeString.concat(`author:${cleanLine(author)}\n\n`);

    recipeString = recipeString.concat(`categories:\n`);
    $('meta[itemprop="recipeCategory"]').each((i, elem) => {
      const category = $(elem).attr("content");
      recipeString = recipeString.concat(`${cleanLine(category)}\n`);
    });

    recipeString = recipeString.concat(`\ningredients:\n`);
    $('.recipe-ingred_txt').each((i, elem) => {
      const ingredientText = $(elem).text();
      if (ingredientText && ingredientText !== 'Add all ingredients to list') {
        recipeString = recipeString.concat(`${cleanLine(ingredientText)}\n`);
      }
    });

    recipeString = recipeString.concat(`\ndirections:\n`);
    $('.recipe-directions__list--item').each((i, elem) => {
      const directionText = $(elem).text();
      if (directionText) {
        recipeString = recipeString.concat(`${cleanLine(directionText)}\n`);
      }
    });
    recipeString = recipeString.concat(`\n~\n\n`);
    const collection = mongo.collection('recipes');
    const recipeObj = {
      source: 'allRecipes',
      index,
      text: recipeString,
    };
    return new Promise((resolve) => {
      collection.insert(recipeObj, (err, res) => {
        if (err) {
          console.log(err);
          return `mongo error inserting ${index}`;
        }
        return resolve(`Inserted ${index}`);
      });
    });
  } catch (err) {
    const errName = _.get(err, 'name');
    if (errName === 'StatusCodeError') {
      return `StatusCodeError for index ${index}: ${err.statusCode}`;
    }
    console.log(err);
    return `Unexpected error processing ${index}`;
  }
}

async function getGeniusRecipe(index) {
  const mongo = getMongo();
  const options = {
    uri: `http://www.geniuskitchen.com/recipe/whocares-${index}`,
    transform: (body) => {
      return cheerio.load(body);
    },
    maxRedirects: 5,
  };
  try {
    let recipeString = "";
    const $ = await request(options);
    const title = $('.recipe-header h1').text();
    if (!title) {
      return;
    }
    recipeString = recipeString.concat(`title:${cleanLine(title)}\n`);
    const author = $('.byline a').text().trim();
    recipeString = recipeString.concat(`author:${cleanLine(author)}\n\n`);

    recipeString = recipeString.concat(`categories:\n`);
    const category = $('.gk-breadcrumbs a').last().text();
    recipeString = recipeString.concat(`${cleanLine(category)}\n`);

    recipeString = recipeString.concat(`\ningredients:\n`);
    $('.ingredient-list li').each((i, list) => {
      const ingredientText = $(list).text().replace(new RegExp('  ', 'g'), ' ');
      if (ingredientText) {
        recipeString = recipeString.concat(`${cleanLine(ingredientText)}\n`);
      }
    });

    recipeString = recipeString.concat(`\ndirections:\n`);
    $('.directions-inner ol li').each((i, elem) => {
      const directionText = $(elem).text();
      if (directionText && !directionText.includes('Submit a Correction')) {
        recipeString = recipeString.concat(`${cleanLine(directionText)}\n`);
      }
    });
    recipeString = recipeString.concat(`\n~\n\n`);
    const collection = mongo.collection('recipes');
    const recipeObj = {
      source: 'geniuskitchen',
      index,
      text: recipeString,
    };
    return new Promise((resolve) => {
      collection.insert(recipeObj, (err, res) => {
        if (err) {
          console.log(err);
        }
        console.log(`Inserting ${index}`);
        return resolve();
      });
    });
  } catch (err) {
    const errName = _.get(err, 'name');
    if (errName === 'StatusCodeError') {
      console.log(`StatusCodeError for index ${index}: ${err.statusCode}`);
    } else {
      console.log(err);
    }
    return;
  }
}

function createAndStartWorker() {
  try {
    const workerOptions = {
      autostart: true,
      timeout: 5000,
      rsmq: rsmq.rsmq,
      alwaysLogErrors: true,
    };
    const worker = new RSMQWorker('allRecipes', workerOptions);
    worker.on("message", async function(msg, next, id) {
      // process your message
      console.log("Message: " + msg);
      try {
        const result = await getAllRecipe(msg);
        console.log(result);
      } catch (err) {
        console.log(err);
      }
      next();
    });

    // optional error listeners
    worker.on('error', function(err, msg) {
      console.log("ERROR", err, msg.id);
    });
    worker.on('exceeded', function(msg) {
      console.log("EXCEEDED", msg.id);
    });
    worker.on('timeout', function(msg) {
      console.log("TIMEOUT", msg.id, msg.rc);
    });

    worker.start();
    console.log('Worker started');
  } catch (err) {
    console.log(err);
  }
}

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

async function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log(`Server started on ${bind}`);
  MongoClient.connect(mongoUri, { useNewUrlParser: true }, async (mongoErr, client) => {
    if (mongoErr) {
      console.log(mongoErr);
      process.exit(1);
    }
    console.log('Successfully connected to mongo');
    const mongoDb = client.db('heroku_sc45bhlb');
    setMongo(mongoDb);
    console.log('Making the dumb queue or whatever');
    try {
      await rsmq.createQueue({ qname: 'allRecipes' });
      console.log('Created allRecipes queue');
    } catch (err) {
      console.log('Probably already created error');
    }
    setRsmq(rsmq);
    createAndStartWorker();
  });
}
